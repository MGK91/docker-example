resource "tls_private_key" "ssh" {
  algorithm = "RSA"
  rsa_bits  = 4096
  count     = var.instance_count == 0 ? 0 : 1
}

resource "aws_key_pair" "generated" {
  key_name   = var.ssh_key_name
  public_key = tls_private_key.ssh[0].public_key_openssh
  count      = var.instance_count == 0 ? 0 : 1
}

resource "aws_s3_object" "private_key_upload" {
  bucket = var.key_s3_bucket
  key    = "${var.ssh_key_name}.pem"
  content = tls_private_key.ssh[0].private_key_pem
  count = var.instance_count == 0 ? 0 : 1
}

resource "aws_security_group" "ec2_sg" {
  name        = "ansible-lab-sg"
  description = "Allow SSH for first, restrict others"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = var.instance_count > 0 ? ["0.0.0.0/0"] : []
  }

  dynamic "ingress" {
    for_each = toset([for i in range(1, var.instance_count) : i])
    content {
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = ["10.0.0.0/16"]
    }
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "ec2" {
  instance_count         = var.instance_count
  ami           = var.ami_id
  instance_type = "t2.micro"
  subnet_id     = element(var.subnet_ids, count.index % length(var.subnet_ids))
  key_name      = count.index == 0 ? aws_key_pair.generated[0].key_name : var.ssh_key_name
  vpc_security_group_ids = [aws_security_group.ec2_sg.id]

  provisioner "remote-exec" {
    count = count.index == 0 && var.install_ansible ? 1 : 0
    connection {
      type        = "ssh"
      user        = "ec2-user"
      private_key = tls_private_key.ssh[0].private_key_pem
      host        = self.public_ip
    }

    inline = [
      "sudo yum update -y",
      "sudo amazon-linux-extras install epel -y",
      "sudo yum install ansible -y"
    ]
  }

  tags = {
    Name = "ansible-host-${count.index + 1}"
  }
}

